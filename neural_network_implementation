import math
import random

import numpy as np
from keras.datasets import mnist


# region Forward Pass

def initialize_parameters(layer_dims) -> dict:
    '''
    input: an array of the dimensions of each layer in the network
    (layer 0 is the size of the flattened input, layer L is the output softmax)

    output: a dictionary containing the initialized W and b parameters of each layer
    (W1…WL, b1…bL).

    Hint: Use the randn and zeros functions of numpy to initialize W and b, respectively
    '''
    parameters = {}
    for i, dim in enumerate(layer_dims[1:], 1):
        parameters[f'W{i}'] = np.random.randn(dim, layer_dims[i - 1]) * np.sqrt(
            2 / layer_dims[i - 1])
        parameters[f'b{i}'] = np.random.randn(dim, 1)

    return parameters


def linear_forward(A, W, b):
    '''
    Description: Implement the linear part of a layer's forward propagation.

    input:
    A – the activations of the previous layer
    W – the weight matrix of the current layer (of shape [size of current layer, size of previous layer])
    B – the bias vector of the current layer (of shape [size of current layer, 1])

    Output:
    Z – the linear component of the activation function (i.e., the value before applying the non-linear function)
    linear_cache – a dictionary containing A, W, b (stored for making the backpropagation easier to compute)
    '''

    return np.matmul(W, A) + b, {'A': A, 'W': W, 'b': b}


def softmax(Z):
    '''
    Input:
    Z – the linear component of the activation function

    Output:
    A – the activations of the layer
    activation_cache – returns Z, which will be useful for the backpropagation
    '''
    exp_z = np.exp(Z)
    return exp_z / np.sum(exp_z, axis=0), {'Z': Z}


def relu(Z):
    '''
    Input:
    Z – the linear component of the activation function

    Output:
    A – the activations of the layer
    activation_cache – returns Z, which will be useful for the backpropagation
    '''
    return np.maximum(0, Z), {'Z': Z}


def linear_activation_forward(A_prev, W, B, activation: str):
    '''
    Description:
    Implement the forward propagation for the LINEAR->ACTIVATION layer

    Input:
    A_prev – activations of the previous layer
    W – the weights matrix of the current layer
    B – the bias vector of the current layer
    Activation – the activation function to be used (a string, either “softmax” or “relu”)

    Output:
    A – the activations of the current layer
    cache – a joint dictionary containing both linear_cache and activation_cache
    '''
    Z, linear_cache = linear_forward(A_prev, W, B)
    if activation == 'relu':
        A, activation_cache = relu(Z)
    else:
        A, activation_cache = softmax(Z)

    return A, {**linear_cache, **activation_cache}


def l_model_forward(X, parameters, use_batchnorm: bool):
    '''
    Description:
    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SOFTMAX computation

    Input:
    X – the data, numpy array of shape (input size, number of examples)
    parameters – the initialized W and b parameters of each layer
    use_batchnorm - a boolean flag used to determine whether to apply batchnorm after the activation (note that this option needs to be set to “false” in Section 3 and “true” in Section 4).

    Output:
    AL – the last post-activation value
    caches – a list of all the cache objects generated by the linear_forward function
    '''
    A_prev = X
    caches = []
    masks = {}
    num_layers = int(len(parameters) / 2)
    for i in range(1, num_layers):
        if dropout_mode and not prediction_mode:
            di = np.random.binomial(1, keep_prob[i - 1], size=A_prev.shape) / keep_prob[i - 1]
            masks[i] = di
            A_prev = np.multiply(A_prev, di)
        A_prev, cache = linear_activation_forward(A_prev, parameters[f'W{i}'], parameters[f'b{i}'], 'relu')
        if use_batchnorm:
            A_prev = apply_batchnorm(A_prev)
        caches.append(cache)

    if dropout_mode and not prediction_mode:
        di = np.random.binomial(1, keep_prob[num_layers - 1], size=A_prev.shape) / keep_prob[num_layers - 1]
        masks[num_layers] = di
        A_prev = np.multiply(A_prev, di)
    AL, cache = linear_activation_forward(A_prev,
                                          parameters[f'W{num_layers}'],
                                          parameters[f'b{num_layers}'],
                                          'softmax')
    caches.append(cache)
    if dropout_mode and not prediction_mode:
        for i in range(0, len(caches) - 1):
            caches[i]["mask"] = masks[i + 2]
    return AL, caches


def compute_cost(AL, Y):
    '''
    Description:
    Implement the cost function defined by equation. The requested cost function is categorical cross-entropy loss. The formula is as follows :
    cost=-1/m*∑_1^m▒∑_1^C▒〖y_i  log⁡〖(y ̂)〗 〗, where y_i is one for the true class (“ground-truth”) and y ̂ is the softmax-adjusted prediction (this link provides a good overview).

    Input:
    AL – probability vector corresponding to your label predictions, shape (num_of_classes, number of examples)
    Y – the labels vector (i.e. the ground truth), (num_of_classes, number of examples)

    Output:
    cost – the cross-entropy cost
    '''
    total = np.sum(np.log(AL[Y > 0]))
    return - total / len(Y)


def apply_batchnorm(A, epsilon=1e-5):
    '''
    Description: performs batchnorm on the received activation values of a given layer.

    Input:
    A - the activation values of a given layer
    epsilon - small constant so variance is not 0

    output:
    NA - the normalized activation values, based on the formula learned in class
    '''
    means = A.mean(axis=1)[:, None]
    variances = A.var(axis=1)[:, None]
    std = np.sqrt(variances + epsilon)
    return (A - means) / std


# endregion

# region Back Propagation
def linear_backward(dZ, cache):
    '''
    description:
    Implements the linear part of the backward propagation process for a single layer

    Input:
    dZ – the gradient of the cost with respect to the linear output of the current layer (layer l)
    cache – tuple of values (A_prev, W, b) coming from the forward propagation in the current layer

    Output:
    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW -- Gradient of the cost with respect to W (current layer l), same shape as W
    db -- Gradient of the cost with respect to b (current layer l), same shape as b
    '''
    A_prev, W, b = cache['A'], cache['W'], cache['b']
    m = A_prev.shape[1]

    dW = np.dot(dZ, A_prev.T) / m
    db = np.sum(dZ, axis=1, keepdims=True) / m
    dA_prev = np.dot(W.T, dZ)

    return dA_prev, dW, db


def linear_activation_backward(dA, cache, activation):
    '''
    Description:
    Implements the backward propagation for the LINEAR->ACTIVATION layer. The function first computes dZ and then applies the linear_backward function.

    Some comments:
        The derivative of ReLU is f^' (x)={■(1&if x>0@0&otherwise)┤
        The derivative of the softmax function is: p_i-y_i, where p_i is the softmax-adjusted probability of the class and y_i is the “ground truth” (i.e. 1 for the real class, 0 for all others)
        You should use the activations cache created earlier for the calculation of the activation derivative and the linear cache should be fed to the linear_backward function

    Input:
    dA – post activation gradient of the current layer
    cache – contains both the linear cache and the activations cache

    Output:
    dA_prev – Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW – Gradient of the cost with respect to W (current layer l), same shape as W
    db – Gradient of the cost with respect to b (current layer l), same shape as b
    '''
    if activation == 'relu':
        dZ = relu_backward(dA, cache)
        if dropout_mode:
            dZ *= cache['mask']
    else:
        dZ = softmax_backward(dA, cache)

    dA_prev, dW, db = linear_backward(dZ, cache)
    return dA_prev, dW, db


def relu_backward(dA, activation_cache):
    '''
    Description:
    Implements backward propagation for a ReLU unit

    Input:
    dA – the post-activation gradient
    activation_cache – contains Z (stored during the forward propagation)

    Output:
    dZ – gradient of the cost with respect to Z
    '''
    Z = activation_cache['Z']
    relu_deriv = (Z > 0).astype(float)
    return dA * relu_deriv


def softmax_backward(dA, activation_cache):
    '''
    Description:
    Implements backward propagation for a softmax unit

    Input:
    dA – the post-activation gradient
    activation_cache – contains Z (stored during the forward propagation)

    Output:
    dZ – gradient of the cost with respect to Z
    '''
    Y = activation_cache['Y']
    softmax_deriv = dA - Y
    return softmax_deriv


def l_model_backward(AL, Y, caches):
    '''
    Description:
    Implement the backward propagation process for the entire network.

    Some comments:
    the backpropagation for the softmax function should be done only once as only the output layers uses it and the RELU should be done iteratively over all the remaining layers of the network.

    Input:
    AL - the probabilities vector, the output of the forward propagation (L_model_forward)
    Y - the true labels vector (the "ground truth" - true classifications)
    Caches - list of caches containing for each layer: a) the linear cache; b) the activation cache

    Output:
    Grads - a dictionary with the gradients
                 grads["dA" + str(l)] = ...
                 grads["dW" + str(l)] = ...
                 grads["db" + str(l)] = ...
    '''

    grads = {}
    num_layers = int(len(caches))
    caches[num_layers - 1]['Y'] = Y
    dA_prev, dW, db = linear_activation_backward(AL, caches[num_layers - 1], 'softmax')
    grads["dA" + str(num_layers)] = dA_prev
    grads["dW" + str(num_layers)] = dW
    grads["db" + str(num_layers)] = db
    for i in range(num_layers - 1, 0, -1):
        dA_prev, dW, db = linear_activation_backward(dA_prev, caches[i - 1], 'relu')
        grads["dA" + str(i)] = dA_prev
        grads["dW" + str(i)] = dW
        grads["db" + str(i)] = db

    return grads


def update_parameters(parameters, grads, learning_rate):
    '''
    Description:
    Updates parameters using gradient descent

    Input:
    parameters – a python dictionary containing the DNN architecture’s parameters
    grads – a python dictionary containing the gradients (generated by L_model_backward)
    learning_rate – the learning rate used to update the parameters (the “alpha”)

    Output:
    parameters – the updated values of the parameters object provided as input
    '''
    num_layers = int(len(parameters) / 2)
    for l in range(1, num_layers + 1):
        parameters[f'W{l}'] = parameters[f'W{l}'] - learning_rate * grads["dW" + str(l)]
        parameters[f'b{l}'] = parameters[f'b{l}'] - learning_rate * grads["db" + str(l)]
    return parameters


# endregion

# region Train & Predict
def train_valid_split(X, Y):
    '''
    Use 20% of the training set as a validation set (samples need to be randomly chosen).

    X – the input data, a numpy array of shape (height*width, number_of_examples)
    Y – the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
    '''
    n = X.shape[1]
    validation_idx = random.sample(range(0, n), int(n * 0.2))
    validation_X = X[:, validation_idx]
    validation_Y = Y[:, validation_idx]
    train_idx = np.delete(range(n), validation_idx)
    train_X = X[:, train_idx]
    train_y = Y[:, train_idx]
    return train_X, train_y, validation_X, validation_Y


def predict(X, Y, parameters):
    '''
    Description:
    The function receives an input data and the true labels and calculates the accuracy of the trained neural network on the data.

    Input:
    X – the input data, a numpy array of shape (height*width, number_of_examples)
    Y – the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
    Parameters – a python dictionary containing the DNN architecture’s parameters

    Output:
    accuracy – the accuracy measure of the neural net on the provided data (i.e. the percentage of the samples for which the correct label receives the highest confidence score).
               Use the softmax function to normalize the output values.
    '''
    prediction_mode = True
    predicted, caches = l_model_forward(X, parameters, batchnorm_bool)
    prediction_mode = False
    predicted = np.argmax(predicted, axis=0)
    Y = np.argmax(Y, axis=0)
    acc = np.sum(np.equal(Y, predicted)) / len(Y)
    return acc


def print_final_accuracy_values(train_X, train_y, validation_X, validation_y, parameters):
    print(f'Final train accuracy - {predict(train_X, train_y, parameters)}')
    print(f'Final valdation accuracy - {predict(validation_X, validation_y, parameters)}')


def l_layer_model(X, Y, layers_dims, learning_rate, num_iterations, batch_size):
    '''
    Description:
    Implements a L-layer neural network. All layers but the last should have the ReLU activation function, and the final layer will apply the softmax activation function. The size of the output layer should be equal to the number of labels in the data. Please select a batch size that enables your code to run well (i.e. no memory overflows while still running relatively fast).

    Hint: the function should use the earlier functions in the following order: initialize -> L_model_forward -> compute_cost -> L_model_backward -> update parameters

    Input:
    X – the input data, a numpy array of shape (height*width , number_of_examples)
    Comment: since the input is in grayscale we only have height and width, otherwise it would have been height*width*3
    Y – the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
    Layer_dims – a list containing the dimensions of each layer, including the input
    batch_size – the number of examples in a single training batch.

    Output:
    parameters – the parameters learnt by the system during the training (the same parameters that were updated in the update_parameters function).
    costs – the values of the cost function (calculated by the compute_cost function). One value is to be saved after each 100 training iterations (e.g. 3000 iterations -> 30 values).
    '''
    train_X, train_Y, validation_X, validation_y = train_valid_split(X, Y)
    parameters = initialize_parameters(layers_dims)
    converged = False
    iterations_cnt = 0
    iterations_cnt_cost = 0
    prev_valid_cost = np.inf
    costs = []
    num_of_batches = math.ceil(train_X.shape[1] / batch_size)
    for epoch in range(num_epochs):
        # shuffle indexes
        indexes = list(range(train_X.shape[1]))
        np.random.shuffle(indexes)
        for i in range(num_of_batches):
            start_idx = i * batch_size
            predicted, caches = l_model_forward(train_X[:, indexes[start_idx:start_idx + batch_size]],
                                                parameters,
                                                batchnorm_bool)
            iterations_cnt_cost += 1
            if iterations_cnt_cost % num_iterations == 0:
                train_cost = compute_cost(predicted, train_Y[:, indexes[start_idx:start_idx + batch_size]])
                costs.append(train_cost)

            grads = l_model_backward(predicted, train_Y[:, indexes[start_idx:start_idx + batch_size]], caches)
            parameters = update_parameters(parameters, grads, learning_rate)
            predicted, caches = l_model_forward(validation_X, parameters, batchnorm_bool)
            valid_cost = compute_cost(predicted, validation_y)
            if prev_valid_cost - stop_epsilon < valid_cost:
                iterations_cnt += 1
                if iterations_cnt == num_iterations:
                    converged = True
                    break
            else:
                iterations_cnt = 0
                prev_valid_cost = valid_cost

        if converged:
            print(f'Converged after {epoch} epochs and {iterations_cnt_cost} iterations')
            print_final_accuracy_values(train_X, train_Y, validation_X, validation_y, parameters)
            break
    return parameters, costs


# endregion

# region Data Preperation Functions
def convert_to_onehot_vector(Y, num_classes=10):
    Y_oneHot = np.zeros((num_classes, len(Y)))
    Y_oneHot[Y, np.arange(len(Y))] = 1
    return Y_oneHot


def load_data():
    (train_X, train_y), (test_X, test_y) = mnist.load_data()
    train_X = train_X.reshape(train_X.shape[0], int(train_X.shape[1] * train_X.shape[2])).T / 255
    test_X = test_X.reshape(test_X.shape[0], int(test_X.shape[1] * test_X.shape[2])).T / 255
    train_y = convert_to_onehot_vector(train_y)
    test_y = convert_to_onehot_vector(test_y)
    return train_X, test_X, train_y, test_y


# endregion

if __name__ == '__main__':
    learning_rate = 0.009
    layers_dims = [784, 20, 7, 5, 10]
    num_iterations = 100

    num_epochs = 20
    batchnorm_bool = False
    stop_epsilon = 0.0001

    dropout_mode = True
    prediction_mode = False # false while training
    keep_prob = [1, 0.9, 1, 1]

    batch_size = 64
    train_X, test_X, train_y, test_y = load_data()
    parameters, costs = l_layer_model(train_X, train_y, layers_dims, learning_rate, num_iterations, batch_size)
    predict(test_X, test_y, parameters)
